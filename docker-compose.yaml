---
version: '3'
services:
  ## PostgreSQL Users Docker Compose Config
  postgres-users:
    container_name: postgres-users
    image: postgres
    environment:
      POSTGRES_DB: data-protector-template-users-db
      POSTGRES_USER: data-protector-template-app
      POSTGRES_PASSWORD: qwerty007
      PGDATA: /data/postgres
    volumes:
      - ./postgres-users:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: unless-stopped
    networks:
      - local

  ## PostgreSQL People Docker Compose Config
  postgres-people:
    container_name: postgres-people
    image: postgres
    environment:
      POSTGRES_DB: data-protector-template-people-db
      POSTGRES_USER: data-protector-template-app
      POSTGRES_PASSWORD: qwerty007
      PGDATA: /data/postgres
    volumes:
      - ./postgres-inventory:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - local


  ## Eureka Server
  discovery-server:
    build: ./eureka-server
    container_name: discovery-server
    pull_policy: always
    ports:
      - "10000:10000"
    networks:
      - local

  config-server:
    build: ./config-server
    container_name: config-server
    pull_policy: always
    ports:
      - "8083:8083"
    depends_on:
      - discovery-server
    networks:
      - local

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8082:8082"
    expose:
      - "8082"
    depends_on:
      - discovery-server
      - config-server
    networks:
      - local


  ## Order-Service Docker Compose Config
  users-api:
    build: ./users-api
    container_name: users-api
    pull_policy: always
    depends_on:
      - api-gateway
      - config-server
      - discovery-server
      - postgres-users
    networks:
      - local


  ## Inventory-Service Docker Compose Config
  people-service:
    build: ./wrapper-api
    container_name: people-service
    pull_policy: always
    depends_on:
      - api-gateway
      - config-server
      - discovery-server
      - postgres-people
      - elasticsearch
    networks:
      - local
  elasticsearch:
    image: elasticsearch:8.3.3
    container_name: elasticsearch_springboot

    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"

    depends_on:
      - discovery-server

    networks:
      - local

  kibana:
    image: kibana:8.3.3
    container_name: kibana_springboot
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      - discovery-server
      - api-gateway
      - users-api
      - people-service
    networks:
      - local




  logstash:
    image: logstash:8.3.3
    container_name: logstash_springboot
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"

    depends_on:
      - discovery-server
      - api-gateway
      - users-api
      - people-service
    networks:
      - local
networks:
  local:
    driver: bridge

volumes:
  elasticsearch_data:
    driver: local